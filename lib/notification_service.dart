import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// NOTE: This file is generated by `flutterfire configure`
// We need to import the firebase options here because the background handler uses it.
import 'firebase_options.dart'; 

// --- 1. Top-Level Handler for Background/Terminated Messages ---
// Must be a top-level function (outside of any class)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // If you need to use any Firebase services in the background, call initializeApp
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print("Handling a background message: ${message.messageId}");
  
  // You can perform heavy-lifting logic here (e.g., fetch data, update state)
}


// --- 2. Local Notifications Setup (For Foreground Display on Android) ---
/// Create a [AndroidNotificationChannel] for heads up notifications
const AndroidNotificationChannel highImportanceChannel = AndroidNotificationChannel(
  'high_importance_channel', // id
  'High Importance Notifications', // title
  description: 'This channel is used for important notifications.',
  importance: Importance.max,
);

/// Initialize the [FlutterLocalNotificationsPlugin] for local notifications
final FlutterLocalNotificationsPlugin localNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

// --- 3. Notification Service Class ---
class NotificationService {
  final FirebaseMessaging _fcm = FirebaseMessaging.instance;

  // Static getters to expose necessary components for main.dart setup
  static AndroidNotificationChannel get androidChannel => highImportanceChannel;
  static FlutterLocalNotificationsPlugin get plugin => localNotificationsPlugin;
  static Function get backgroundHandler => firebaseMessagingBackgroundHandler;


  void initializeLocalNotifications() {
    // Android initialization settings
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('launcher_icon');

    // Cross-platform initialization settings
    const InitializationSettings initializationSettings =
        InitializationSettings(android: initializationSettingsAndroid);

    localNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) async {
        // Handle notification click when the app is in the foreground/background
        if (response.payload != null) {
          print('notification payload: ${response.payload}');
          // Navigation logic can go here (e.g., Navigator.pushNamed)
        }
      },
    );
  }

  void setupForegroundMessageListener() {
    // Listener for messages when the app is in the foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('Got a message whilst in the foreground!');
      print('Message data: ${message.data}');

      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;

      if (notification != null && android != null) {
        // Show the notification using flutter_local_notifications 
        // because the native FCM SDK suppresses visible notifications 
        // when the app is in the foreground on Android.
        localNotificationsPlugin.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(
              highImportanceChannel.id,
              highImportanceChannel.name,
              channelDescription: highImportanceChannel.description,
              icon: android.smallIcon,
            ),
          ),
          payload: message.data['route'] ?? 'default_payload',
        );
      }
    });
  }

  Future<String?> getDeviceToken() async {
    // Request permission (mostly for iOS/Web, but good practice)
    NotificationSettings settings = await _fcm.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    print('User granted permission: ${settings.authorizationStatus}');

    // Get the device registration token
    String? token = await _fcm.getToken();
    print("FCM Token: $token");
    
    // IMPORTANT: Send this token to your server so you can send targeted notifications!
    
    return token;
  }

  // Handles interaction when the app is opened from a terminated state
  Future<void> handleTerminatedStateMessage(BuildContext context) async {
    RemoteMessage? initialMessage = await _fcm.getInitialMessage();

    if (initialMessage != null) {
      // You can navigate or perform actions based on the message data
      _handleNotificationClick(context, initialMessage);
    }
    
    // Handles interaction when the app is opened from a background state
    FirebaseMessaging.onMessageOpenedApp.listen((message) {
      _handleNotificationClick(context, message);
    });
  }
  
  void _handleNotificationClick(BuildContext context, RemoteMessage message) {
     print('Notification clicked! Data: ${message.data}');
     // Example navigation logic using named routes defined in MyApp:
     if (message.data['route'] == 'settings') {
       Navigator.of(context).pushNamed('/settings');
     } else if (message.data['route'] == 'profile') {
       Navigator.of(context).pushNamed('/profile');
     }
  }
}